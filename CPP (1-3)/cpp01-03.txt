1. 주요 용어
(1) 추상화 - 세상에 존재하는 실제 대상물의 수맣은 특성들 중에서 응용 분야에 필요한 요소들만으로 구성된 모델로 표현하는 것
(2) 캡슐화 - 객체 내부의 상세한 구현 부분과 외부 사용자의 관점을 분리하여 내부 구현 부분은 공개하지 않고 외부의 타 객체는 공개된 인터페이스를 통해 객체를 사용할 수 있게 하는 것
(캡슐화의 장점) 소프트웨어의 유지보수가 용의함. 재사용이 용이함. 
(3) 정보 은닉 - 사용자가 알지 못해도 되는 세부적 구성 요소들을 사용자에게 감추고 사용자에게는 필요한 정보만을 공개하는 것
(4) 상속 - 상위 클래스가 갖는 일반적인 속성 및 행위를 하위 클래스가 이어 받게 하는 기능
(5) 다형성 - 동일한 연산이나 메소드가 대상에 따라 그것에 맞는 다른 방법으로 동작하는 것
(6) 바인딩 - 변수, 함수 등의 명칭이 값, 메모리 주소 등 그 대상에 해당되는 실체와 연결되는 것
(7) 동적 바인딩 - 바인딩이 프로그램의 실행 중 동적으로 일어나도록 하는 것


2. 선행처리 
- C++ 프로그램을 컴파일 하기 전에 소스프로그램을 가공하여 컴파일러가 실제로 번역할 소스 프로그램을 만드는 것
- 선행처리기 지시어로 처리를 지시함. #으로 시작.
- 헤더 파일 삽입, 조건부 컴파일, 매크로 확장
- (예) #include <iostream>

3. 명칭공간(namespace)
using namespace std;
- 명칭 공간은 특정한 이름들이 인식되는 프로그램의 부분. 동일한 명칭이라도 서로 다른 명칭공간에서 정의되었다면 별개의 것으로 구분함. 
- 명칭공간::명칭
-> 여러 프로그래머가 작성한 프로그램을 결합하여 완성된 프로그램을 만들 경우 각자 필요한 명칭을 독립적으로 만들어 사용할 수 있음.
(1) 전역명칭공간 - 특정 명칭공간에 속하지 않는 기본 명칭공간
(2) std 명칭공간 - 표준 C++ 라이브러리의 명칭들이 정의된 명칭공간
(3) using namespace 구문 - 특정 명칭공간ㅇ을 기본 명칭공간에 포함시키기 위한 구문

4. cout 객체
- 표준 출력 스트림 객체
- 데이터를 문자열로 변환하여 출력함.
- 출력 연산자 <<

5. cin 객체
- 표준 입력 스트림 객체
- 문자열을 입력 변수의 자료형의 값으로 변환하여 입력함.
- 입력연산자 >> 

6. 정수 자료형
- 고정 소수점 방식
- char(1byte), short(2byte), int, long(4byte)
- signed, unsigned
- bool = true/false(1byte)
- 0257(8진수), 0x1a(16진수), 123u(unsigned int), 123l(long), 123ul(unsigned long)
- 'A' = 65 = '\101'(8진수) = '\x41'(16진수)

7. 실수 표현
- 부동 소수점 방식(e2 표현)
- float(4byte) : 부호 1, 지수부 8, 가수부 23 bit
  (표현) 1200.0f, 12e2f
- double(8byte) : 부호 1, 지수부 11, 가수부 52 bit
  (표현) 1200., 1200.0, 12e2, 1.2e+3

8. 상수
- 자료형 한정어 const를 지정하여 선언
- 초기화를 통해서만 값을 정할 수 있음. 정해진 값은 변경할 수 없음.

9. 자동적 형변환
- 두 값 사이의 연산에서는 우선순위가 낮은 자료형의 값이 순위가 높은 자료형의 값과 같은 형으로 자동적으로 변환됨.
- 여러 개의 연산으로 구성된 수식에서 자동적 형 변환은 연산자 단위로 이루어짐.
- 대입 연산자(=)는 값을 저장할 변수의 자료형으로 자동적 형 변환을 함.
- 오차나 오버플로가 발생할 수 있으므로 주의해야 함.
형변환 연산자
(1) dynamic_cast : 기초클래스와 파생클래스 간의 포인터 또는 참조형 변환이 프로그램 실행 중에 일어나도록 지시함.
(2) static_cast : 실행 중에 형 검사를 하지 않으며, 컴파일 할 때 수식에 지정된 그대로 변환함.
(3) reinterpret_cast : 포인터를 다른 자료형의 포인터나 정수 자료형으로, 또는 그 역으로 변환함.
(4) const_cast : const 지정을 일시 해제함.
(예) static_cast<int> (n/10.0)

10. 비트연산자 
- <<좌측 이동, >>우측이동
unsigned char x = 0x96;(1001 0110)
signed char y = 0x96;(1001 0110)
x << 2 : 0101 1000
x >> 2 : 0010 0101
y << 2 : 0101 1000
y >> 2 : 1110 0101
우측 이동의 경우signed 형 데이터에 대해서는 부호를 유지할 수 있도록 부호와 같은 비트가 채워짐.


11. 구조체
- 여러 가지 자료형의 데이터 집합을 저장할 수 있는 새로운 자료형을 정의한 것
struct CircleTpe{
  C2dType center;
  double radius;
}

12. 클래스
- 클래스 선언 : 표현하고자 하는 대상의 행위와 속성을 하나의 단위로 묶어 클래스를 선언함

13. 포인터
- 다른 변수, 구조체, 객체 등 값이 저장된 곳을 가리키는 변수
TypeName *ptrVar;
-> TypeName : 가리킬 값의 자료형
-> ptrVar : 포인터 변수의 이름
ptrVar = &var;
*ptrVar = value;
-> & : 주소 계산 연산자
-> *ptrVar : 포인터인 ptrVar가 가리키는 곳

14. 동적 메모리 할당
(1) 기억 공간의 생명 주기
가. 전역 변수 - 함수 외부에 선언된 변수. 프로그램 시작과 함께 생성되어 프로그램 종료와 함께 소멸됨.
나. 지역 변수 - 블록 내 선언된 변수는 그 블록 안에서만 사용할 수 있는 지역 변수
   (가) 자동변수 : 블록에 들어갈 때 생성되고 나갈 때 소멸됨.
   (나) 정적변수 : 프로그램 시작과 함께 생성되어 프로그램 종료와 함께 소멸됨.(static)
(2) 동적 메모리 할당
- 프로그램 동작 중에 기억 공간의 필요성 및 소요량을 결정하여 필요한 공간을 할당하는 것.
- 기억 공간의 생성 시점 : new 실행 시점
- 기억 공간의 소멸 시점 : delete 실행 시점
- 포인터 변수가 할당된 기억 공간을 가리키게 함.
가. 동적 메모리 할당 연산자
  ptrVar = new TypeName;
  ptrVar = new TypeName[n];
나. 동적 메모리 반납 연산자
  delete ptrVar;
  delete [] ptrVar;
다. 단인 데이터 공간의 할당 및 반환
  int *intPtr;
  intPtr = new int;
    ...
  delete intPtr;
  intPtr = NULL;
라. 연속 데이터 공간의 할당 및 반환
  int *intPtr;
  intPtr = new int[4]
    ...
  delete [] intPtr;
  intPtr = NULL;
  
