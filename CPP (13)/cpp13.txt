#1. 컨테이너 클래스 -> 템플릿
(1) 컨테이너 클래스
- 다른 객체를 저장하는 클래스 : 스택, 큐, 배열, 리스트
(2) 템플릿이란?
- 클래스, 함수 등을 선언하기 위한 형판
- 자료형, 상수 등을 인수를 통해 전달 받음
  -> 전달 인수를 통해 새로운 클래스나 함수를 선언함
- 여러 가지 대상을 위한 클래스나 함수를 템플릿으로 선언함으로써, 동일한 코드를 반복적으로 작성하는 것을 방지함.

#2. 스택과 템플릿
(1) 글래스 템플릿의 선언 형식
template <templateArgs>  //templateArgs 템플릿 매개변수 선언
class TemplateName{}

클래스 템플릿의 멤버함수 선언을 밖에서 하는 경우
template <templateArgs>
ReturnType TemplateName<args>::funcName(fParamLsit){}

자료형/클래스 이외에도 함수 이름이나 상수를 전달할 수 있음.
template <class T, int sz>
class Buffer{ T buf[sz]; }
void f(){
  Buffer <char, 128> buf1;
  Buffer <Complex1, 20> buf2;
  Buffer<int, 10> buf3; //상수 전달
}

#3. 리스트 템플릿
연결 리스트 
- 데이터를 저장하는 노드들이 포인터를 이용하여 순차적으로 연결되어 있는 데이터 구조
- 헤드포인터가 가장 중요
template <class T>
struct node{
  T info;
  Node *next;
  Node(T val): info(val), next(0) {}
};
