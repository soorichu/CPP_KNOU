#1. 연산자의 다중정의
(1) 피연산자의 자료형과 연산자
- 동일한 연산자라도 피연산자의 자료형에 따라 구체적인 처리는 다르게 정의됨.
- 연산자는 피연산자의 자료형에 따라 그에 맞는 처리 절치가 정의됨. 
(2) 연산자의 다중정의
- C++에 정의된 연산자를 사용자가 선언한 클래스의 객체에 대하여 사용할 수 있도록 다중정의
(3) 연산자 다중정의 시 주의사항
- 연산자 의미를 임의로 바꾸지 않는다.
- 연산자의 고유한 특성이 유지되도록 한다.
  연산자의 우선순위나 피연산자의 수 불변
  전위 표기와 후위 표기 연산자의 의미 유지
(4) 연산자 다중정의 위치
- 클래스 멤버로 정의하는 방법
  연산자의 구현 과정에서 객체의 멤버를 엑세스 할 수 있음.
- 클래스 외부에서 정의하는 방법
  클래스 멤버가 아니므로, 객체의 private 멤버는 임의로 사용할 수 없음

#2. 단항 연산자의 다중 정의
(1) 단항 연산자
- 피연산자가 1개인 연산자
- 전위 표기법과 후위 표기법
(2) 다중 정의 방식
ReturnClass ClassName::operator opSymbol(){
}
(3) 전위 표기와 후기 표기 
- IntClass1, IntClass2
(EX) Pancils 클래스
- n타 m자루 형태로 연필의 개수를 표현하는 클래스를 정의한다. 낱개의 수를 1개 증가시키는 전위 및 후위 표기 ++ 연산자를 포함하여, 연필의 수량을 출력하는 메소드를 포함한다.

#3. 이항연산자의 다중정의
ReturnClass ClassName::operator opSymbol(ArgClass arg){}
- opSymbol : + - * / 등의 이항연산자 기호
- 객체 자신이 좌측 피연산자, arg가 우측 피연산자에 해당함 (중요!!!)
(EX) Complex2obj1 + Complex2obj2