#1. 추상클래스
(1) 추상클래스란
- 유사한 성격을 갖는 클래스들의 공통적 요소를 뽑아서 만든 클래스로, 일부 메소드의 구체적 구현이 없어 직접적인 사례가 존재하지 않는 클래스
- 추상클래스로 객체를 직접 정의할 수 없음
=> 추상 클래스는 그 자체로 사용되는 것이 아니라, 파생클래스를 통해 구현되어 사용됨
- 사용 목적 : 특정 그룹에 속하는 클래스들(파생클래스들)이 반드시 가지고 있어야 할 행위를 지정하여 누락하지 않도록
  도형 클래스에서 draw와 move를 정의하여 상속 받은 원과 삼각형이 반드시 draw와 move를 반드시 구현하도록 함.
(2) 상세 클래스 - 클래스의 모든 요소가 구체적으로 구현되어 직접적인 사례가 존재하는 클래스
(3) 추상클래스의 선언
- 멤버 함수 중 순수가상함수가 포함된 클래스를 선언
- 순수 가상함수의 선언
virtual RetType fucntionName(fParameterList) = 0;

class AClass{
public:
  virtual void vf()= 0; //순수가상함수
  void f1() const { }
};

- 상세 클래스의 선언 : 기초클래스로부터 상속된 순수 가상함수가 있다면 이들을 모두 재정의하여 구체적으로 구현해야 함.
class CClass : public AClass{
public:
  void vf(){ cout << "순수가상함수 반드시 구현 해야 함" << endl; }  
  void f2() const{ cout << "Concrete" << endl; }
};

#2. 다중상속
만약 Student와 Employee에 print()함수가 있다면 이를 상속 받은 Parttime은 print()를 호출하면 에러가 난다.
이 경우 Student::print() 와 같이 명확하게 소속을 명시해주면 된다.
Person - Student - Parttime
       \ Employee /
이 경우 Person이 중복 상속 된다. 이 때는 가상 기초 클래스를 이용한다.
class Student : virtual public Person{ void print() const{}  };
class Employee : virtual public Person{ void print() const{} };
class Parttime : public Student, public Employee{
  //가상 클래스 Person도 생성자를 호출해야 한다!!!! 
  Parttime(const string &n, const string &s, const string &c): Person(n), Student(n, s), Employee(n, c){}
  void print const {
    Student::print();
    Employee::print();
  }
};