#1 소멸자
객체가 소멸될 때 수행할 작업을 정의하는 특수한 멤버함수
(특성)
- 소멸자의 이름은 클래스의 이름과 같으나 앞에 ~가 붙음
- 소멸자는 return 명령으로 값을 반환할 수 없으며, 소멸자 머리에 반환 자료형을 표시하지 않음.
- 인수를 전달받을 매개변수를 포함할 수 없음.
- 소멸자를 다중정의할 수 없으며 클래스에 하나만 정의
- public으로 선언하는 것이 일반적임.
- 상속을 통해 파생 클래스를 정의하는 경우 virtual을 지정하여 가상함수가 되도록 하는 것이 좋음.


#2 생성자의 활용
*디폴트생성자
- 매개변수 없는 생성자 또는 모든 매개변수에 디폴트 인수가 지정된 생성자
- 클래스를 선언할 때 생성자를 선언하지 않으면 컴파일러는 아무일도 하지 않는 디폴트 생성자를 만듦.
(예시) Counter(){}
- 생성자를 하나라도 선언하면 컴파일러는 디폴트 생성자를 자동으로 만들지 않음.

*복사생성자 copy constructor
- 같은 클래스의 객체를 복사하여 객체를 만드는 생성자
- 복사 생성자를 명시적으로 선언하지 않으면 원본 객체의 데이터 멤버들을 그대로 복사하여 객체를 정의하는 복사 생성자가 자동적으로 선언됨. 
(예시) CounterM

*디폴트 생성자
- 디폴트 생성자가 선언된 클래스는 객체 배열을 선언할 수 있음
(예시1)
Counter() {} ---> Counter cntArr[4]; //가능!!
(예시2)
CounterM(int n) : value(0), maxValue(n+1) {} ---> CounterM cntArr[4]; //에러!!
CounterM cntArr[4] = {CounterM(9), CounterM(99), CounterM(999), CounterM(9999)}; //이렇게 하나하나 객체를 만들어 주어야 한다.
- new 연산자로 객체를 동적 할당하기 위해서는 디폴트 생성자가 필요함.
Counter *pt = new Counter[10]; //가능!!
CounterM *pt = new CounterM[10]; //디폴트 생성자가 없으므로 에러!!


#3 static 데이터 멤버와 static 멤버함수
* static 데이터 멤버
- 클래스에 속하는 모든 객체들이 공유하는 데이터 멤버
- 객체 생성과 관계 없이 프로그램이 시작되면 static 데이터 멤버를 위한 메모리 공간이 할당됨.
- 일반 데이터 멤버와는 달리, static 데이터 멤버는 클래스 선언문 내에서는 선언만 하고 클래스 외부에서 별도로 정의를 해야함.

*ststic 멤버 함수
- 특정 객체에 대한 처리를 하는 게 아니라 소속 클래스 단위의 작업 수행
- 객체가 정의되지 않아도 사용할 수 있음.
- stiatc 멤버함수 안에서는 일반 멤버를 사용할 수 없으며, static 멤버만 사용가능