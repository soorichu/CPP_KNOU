&매개변수(참조)와 *매개변수(포인터)에 대해서 알아보기

1. 함수
- 필요한 작업을 수행하는 프로그램 문장들을 하나의 단위로 모아 놓고 이름을 부여한 것.
- 의미 있는 작업 단위로 모듈화하여 프로그램을 작성하면 간결하고 이해하기 쉬우며 동일 코드를 중복 작성하지 않아도 됨.
- 함수의 호출과 복귀 과정에서 처리 시간이 추가됨.

2. 매개변수
(1) 실매개변수(actual parameter) - 함수 호출 문장에서 함수의 형식 매개변수에 전달할 값
(2) 형식매개변수(formal parameter) - 인수를 전달받기 위해 함수에 선언된 매개변수. 함수 헤더에 매개변수의 자료형과 이름을 선언함.
(3) 값 호출(call-by-value) - 실 매개변수의 값을 형식 매개변수에 복사함.
(4) 참조 호출(call-by-reference) - 초기화를 통해 대상을 참조할 수 있으며, 참조 대상의 별명처럼 사용할 수 있음.
    (참조변수 - 다른 변수를 참조하는 변수. 포인터와 유사)
  - 실 매개변수의 참조를 형식 매개변수에 전달함.
  - 함수에서 형식 매개변수의 값을 변경하는 것은 실 매개변수의 값을 변경하는 것과 같음.
  - 형식 매개변수에 복사되는 데이터의 양은 실 매개변수의 크기와 관계 없이 일정함.
  -> 많은 양의 데이터로 구성되는 구조체나 객체를 인수로 전달하는 경우 효과적임.

3. const 인수
 - 실 매개변수 값의 보호
 - 참조 호출을 하거나 포인터를 인수로 전달할 경우 함수에서 실매개변수의 값을 수정할 수 있음.
 - 실 매개변수의 값을 수정할 수 없도로고 하기 위해서는 형식 매개변수를 const로 지정함.
 - 함수 호출의 효율성을 위해 참조 호출을 하지만 실 매개변수의 값이 변경되는 것을 원하지 않을 때 사용함.

4. 디폴트 인수
- 디폴트 값을 인수로 전달하기 위한 방법
- 일반적으로 사용되는 디폴트 값이 있는 인수의 경우 함수를 정의할 때 그 값을 미리 지정할 수 있음
- 함수를 호출할 때 디폴트 값을 인수로 사용할 경우 생략할 수 있음.

5. 함수의 다중정의
(1) 다중정의 - 동일한 이름에 대하여 여러 가지 의미를 부여하는 것. 
(2) 함수 다중정의 - 동일한 이름을 갖는 함수를 여러 개 정의하는 것. 동일한 개념의 처리를 여러 가지 데이터나 객체에 대해 각각의 대상에 맞는 처리를 해야 할 경우 사용함. 
(3) 함수의 다중정의의 예
void Addtime(TimeRec& t1, const TimeRec& t2);
void Addtime(TimeRec& t1, int minutes);

6. inline 함수
- 함수 호촐 위치에 함수의 처리 문장이 삽입되어 컴파일되는 함수
- 함수를 사용함으로써 얻을 수 있는 모듈화의 장점을 살리면서, 함수 호출과정에서 소비되는 부수적인 처리시간을 줄일 수 있음.
-> 매우 빈번히 호출되며 빠른 실행이 요구되는 함수를 inline 함수로 선언함.
(1) inline 선언을 무시하고 일반 함수로 변역되는 경우
- 함수가 너무 큰 경우
- 순환 호출
- 프로그램 내에서 그 함수에 대한 포인터를 사용하는 경우

