#1. 함수 템플릿
일반 함수의 템플릿 선언 형식
template <templateArgs>
ReturnType funcTemplateName(fParameterList){}
함수 템플릿 활용의 예 - 버블 정렬

#2. 표준 템플릿 라이브러리(STL)
C++에 제공되는 표준 컨테이너 클래스 템플릿 라이브러리
(1) 구성요소 - 컨테이너(데이터 저장), 반복자(포인터 역할), 알고리즘
(2) 데이터 저장
- int나 float와 같은 기본 자료형 데이터나 사용자 정의 클래스 객체 등을 저장함.
- 다양한 연산이 제공되어 편리하게 데이터를 저장할 수 있음.
- 컨테이너 종류 : 순차 컨테이너와 연상 컨테이너
(3) 순차 컨테이너 
  동일 객체 자료들을 선형적인 구조로 저장함. 
  가. vector
  - 확장 가능한 배열
  - 첨자를 이용한 빠른 직접 접근
  - 끝에 삽입(또는 삭제)하는 것은 빠르나, 그 외의 위치에 삽입하는 것은 느림
  나. list
  - 이중연결리스트
  - 어느 위치에든 삽입이 효율적임
  - 직접 접근이 어려움
  다. deque
  - vector와 동일하나, 앞에서도 효율적으로 삽입할 수 있음.
(4) 연산 컨테이너
- 키를 이용한 검색 기능 제공
  가. set
  - 키 객체만 저장함.
  - 키 값이 중복되지 않음.
  나. multiset
  - 키 객체만 저장함.
  - 동일한 키 값이 중복될 수 있음
  다. map
  - 키 객체를 값 객체와 연결하여 저장함
  - 키 값이 중복되지 않음
  라. multimap
  - 키 객체를 값 객체와 연결하여 저장함.
  - 동일한 키 값이 중복될 수 있음.
(5) 반복자(iterator)
- 포인터의 개념이 일반화된 것
- 컨테이너의 유형에 따라 서로 다른 형태의 반복자가 사용됨.
  가. 순방향(forward) 반복자 
  - 컨테이너의 순방향으로만 움직일 수 있음
  - ++ 연산자 사용
  나. 역방향(bidirectional) 반복자
  - 순방향 + 역방향
  - ++, -- 연산자
  다. 랜덤 액세스 반복자
  - 양방향 반복자의 기능과 함께 임의의 위치로 이동할 수 있음.
(6) STL 라이브러리(맛만 봄..) 

#3. vector 클래스 템플릿
(1) vector 클래스 템플릿이란?
  - 배열의 개념을 구현한 클래스 템플릿
  - 일반적인 배열의 기능을 포함하면서 여러 가지 유용한 멤버 함수 및 관리 기능이 도입되어 있음.
  - 헤더 파일 <vector>를 #include 명령어로 프로그램에 삽입함.
  - vector 객체의 선언 구문
    vector<ClassName> objName(n);
  - vector의 크기는 배열과 같이 크기를 정하여 생성되나, 필요에 다라 크기를 확장할 수 있음.
(2) 관련 멤버함수
  - size()
  - capacity()
  - resize(n)
  - reserve(n)
  - push_back(value)
  - pop_back()
(3) vector의 반복자 활용
  - 반복자의 선언
    vector <ClassName>::iterator it;
  - 반복자의 값을 구하는 vector의 멤버함수
    begin(): 첫번째 원소를 나타내는 랜덤 액세스 반복자를 반환
    end(): 마지막 원소를 다음 위치를 가리키는 랜덤 액세스 반복자를 반환함.
(3) vector 알고리즘
  가. 알고리즘
    - 반복자를 사용하여 컨테이너의 원소에 대해 적용할 수 있는 연산을 제공함.
    - #include 명령으로 헤더 파일 <algorithm>을 소스 프로그램에 삽입한 후 알고리즘이 함수를 사용함.
    